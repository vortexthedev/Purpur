From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xVorttex <sigamatute@gmail.com>
Date: Tue, 25 Jul 2023 02:38:40 +0300
Subject: [PATCH] Helpers


diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddEntityPacket.java
index 0dd611aed9749ebed64e74fc4c2599c3c7f3ff2c..d4e1fc1f8c88344b28a746e6d8e8f2a9e3c741b0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundAddEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundAddEntityPacket.java
@@ -9,6 +9,7 @@ import net.minecraft.util.Mth;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.entity.EntityType;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
 
 public class ClientboundAddEntityPacket implements Packet<ClientGamePacketListener> {
     private static final double MAGICAL_QUANTIZATION = 8000.0D;
@@ -55,6 +56,20 @@ public class ClientboundAddEntityPacket implements Packet<ClientGamePacketListen
         this.za = (int)(Mth.clamp(velocity.z, -3.9D, 3.9D) * 8000.0D);
     }
 
+    public ClientboundAddEntityPacket(int id, UUID uuid, Location location) {
+        this(id, uuid,
+                location.getX(),
+                location.getY(),
+                location.getZ(),
+                location.getPitch(),
+                location.getYaw(),
+                EntityType.ARMOR_STAND,
+                0,
+                Vec3.ZERO,
+                0.0D
+        );
+    }
+
     public ClientboundAddEntityPacket(FriendlyByteBuf buf) {
         this.id = buf.readVarInt();
         this.uuid = buf.readUUID();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
index 4aa8b483841028fbcc43f9ed47730881263e5065..73314ca6149c2279c8203aaedeae54d6bc75806a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundPlayerInfoUpdatePacket.java
@@ -2,11 +2,6 @@ package net.minecraft.network.protocol.game;
 
 import com.google.common.base.MoreObjects;
 import com.mojang.authlib.GameProfile;
-import java.util.Collection;
-import java.util.EnumSet;
-import java.util.List;
-import java.util.UUID;
-import javax.annotation.Nullable;
 import net.minecraft.Optionull;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
@@ -15,6 +10,12 @@ import net.minecraft.network.protocol.Packet;
 import net.minecraft.server.level.ServerPlayer;
 import net.minecraft.world.level.GameType;
 
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.EnumSet;
+import java.util.List;
+import java.util.UUID;
+
 public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacketListener> {
     private final EnumSet<ClientboundPlayerInfoUpdatePacket.Action> actions;
     private final List<ClientboundPlayerInfoUpdatePacket.Entry> entries;
@@ -29,6 +30,11 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         this.entries = List.of(new ClientboundPlayerInfoUpdatePacket.Entry(player));
     }
 
+    public ClientboundPlayerInfoUpdatePacket(ClientboundPlayerInfoUpdatePacket.Action action, ClientboundPlayerInfoUpdatePacket.Entry entry) {
+        this.actions = EnumSet.of(action);
+        this.entries = List.of(entry);
+    }
+
     public static ClientboundPlayerInfoUpdatePacket createPlayerInitializing(Collection<ServerPlayer> players) {
         EnumSet<ClientboundPlayerInfoUpdatePacket.Action> enumSet = EnumSet.of(ClientboundPlayerInfoUpdatePacket.Action.ADD_PLAYER, ClientboundPlayerInfoUpdatePacket.Action.INITIALIZE_CHAT, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_GAME_MODE, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LISTED, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_LATENCY, ClientboundPlayerInfoUpdatePacket.Action.UPDATE_DISPLAY_NAME);
         return new ClientboundPlayerInfoUpdatePacket(enumSet, players);
@@ -39,7 +45,7 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         this.entries = buf.readList((buf2) -> {
             ClientboundPlayerInfoUpdatePacket.EntryBuilder entryBuilder = new ClientboundPlayerInfoUpdatePacket.EntryBuilder(buf2.readUUID());
 
-            for(ClientboundPlayerInfoUpdatePacket.Action action : this.actions) {
+            for (ClientboundPlayerInfoUpdatePacket.Action action : this.actions) {
                 action.reader.read(entryBuilder, buf2);
             }
 
@@ -53,7 +59,7 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         buf.writeCollection(this.entries, (buf2, entry) -> {
             buf2.writeUUID(entry.profileId());
 
-            for(ClientboundPlayerInfoUpdatePacket.Action action : this.actions) {
+            for (ClientboundPlayerInfoUpdatePacket.Action action : this.actions) {
                 action.writer.write(buf2, entry);
             }
 
@@ -140,7 +146,8 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
         }
     }
 
-    public static record Entry(UUID profileId, GameProfile profile, boolean listed, int latency, GameType gameMode, @Nullable Component displayName, @Nullable RemoteChatSession.Data chatSession) {
+    public static record Entry(UUID profileId, GameProfile profile, boolean listed, int latency, GameType gameMode,
+                               @Nullable Component displayName, @Nullable RemoteChatSession.Data chatSession) {
         Entry(ServerPlayer player) {
             this(player.getUUID(), player.getGameProfile(), true, player.latency, player.gameMode.getGameModeForPlayer(), player.getTabListDisplayName(), Optionull.map(player.getChatSession(), RemoteChatSession::asData));
         }
@@ -159,11 +166,11 @@ public class ClientboundPlayerInfoUpdatePacket implements Packet<ClientGamePacke
 
         EntryBuilder(UUID profileId) {
             this.profileId = profileId;
-            this.profile = new GameProfile(profileId, (String)null);
+            this.profile = new GameProfile(profileId, (String) null);
         }
 
         ClientboundPlayerInfoUpdatePacket.Entry build() {
             return new ClientboundPlayerInfoUpdatePacket.Entry(this.profileId, this.profile, this.listed, this.latency, this.gameMode, this.displayName, this.chatSession);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket.java
index 0c817a96ab46040e0af938b1e5a934eaf918175a..c18f85afb0b4326f692aa8732d3d148fd13acd3f 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetDisplayObjectivePacket.java
@@ -1,11 +1,12 @@
 package net.minecraft.network.protocol.game;
 
-import java.util.Objects;
-import javax.annotation.Nullable;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.scores.Objective;
 
+import javax.annotation.Nullable;
+import java.util.Objects;
+
 public class ClientboundSetDisplayObjectivePacket implements Packet<ClientGamePacketListener> {
     private final int slot;
     private final String objectiveName;
@@ -17,7 +18,15 @@ public class ClientboundSetDisplayObjectivePacket implements Packet<ClientGamePa
         } else {
             this.objectiveName = objective.getName();
         }
+    }
 
+    public ClientboundSetDisplayObjectivePacket(int slot, @Nullable String objectiveName) {
+        this.slot = slot;
+        if (objectiveName == null) {
+            this.objectiveName = "";
+        } else {
+            this.objectiveName = objectiveName;
+        }
     }
 
     public ClientboundSetDisplayObjectivePacket(FriendlyByteBuf buf) {
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetObjectivePacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetObjectivePacket.java
index 9d086186616b5768b42060912952d34c962992df..4a7b20207857e63d573304924f2dffb235a6edba 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetObjectivePacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetObjectivePacket.java
@@ -23,6 +23,13 @@ public class ClientboundSetObjectivePacket implements Packet<ClientGamePacketLis
         this.method = mode;
     }
 
+    public ClientboundSetObjectivePacket(String objectiveName, Component displayName, ObjectiveCriteria.RenderType renderType, int mode){
+        this.objectiveName = objectiveName;
+        this.displayName = displayName;
+        this.renderType = renderType;
+        this.method = mode;
+    }
+
     public ClientboundSetObjectivePacket(FriendlyByteBuf buf) {
         this.objectiveName = buf.readUtf();
         this.method = buf.readByte();
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
index 4ebe22ac20f1a98694cc3bec570ef5bbf06f00aa..b5766ff4e3beb43fff264bc8897157afaec2a8a0 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundSetPlayerTeamPacket.java
@@ -1,14 +1,16 @@
 package net.minecraft.network.protocol.game;
 
 import com.google.common.collect.ImmutableList;
-import java.util.Collection;
-import java.util.Optional;
-import javax.annotation.Nullable;
 import net.minecraft.ChatFormatting;
 import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.chat.Component;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.scores.PlayerTeam;
+import org.bukkit.craftbukkit.util.CraftChatMessage;
+
+import javax.annotation.Nullable;
+import java.util.Collection;
+import java.util.Optional;
 
 public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketListener> {
     private static final int METHOD_ADD = 0;
@@ -21,9 +23,9 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
     private final int method;
     private final String name;
     private final Collection<String> players;
-    private final Optional<ClientboundSetPlayerTeamPacket.Parameters> parameters;
+    private final Optional<Parameters> parameters;
 
-    private ClientboundSetPlayerTeamPacket(String teamName, int packetType, Optional<ClientboundSetPlayerTeamPacket.Parameters> team, Collection<String> playerNames) {
+    public ClientboundSetPlayerTeamPacket(String teamName, int packetType, Optional<Parameters> team, Collection<String> playerNames) {
         this.name = teamName;
         this.method = packetType;
         this.parameters = team;
@@ -31,20 +33,20 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
     }
 
     public static ClientboundSetPlayerTeamPacket createAddOrModifyPacket(PlayerTeam team, boolean updatePlayers) {
-        return new ClientboundSetPlayerTeamPacket(team.getName(), updatePlayers ? 0 : 2, Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(team)), (Collection<String>)(updatePlayers ? team.getPlayers() : ImmutableList.of()));
+        return new ClientboundSetPlayerTeamPacket(team.getName(), updatePlayers ? 0 : 2, Optional.of(new Parameters(team)), (Collection<String>)(updatePlayers ? team.getPlayers() : ImmutableList.of()));
     }
 
     public static ClientboundSetPlayerTeamPacket createRemovePacket(PlayerTeam team) {
         return new ClientboundSetPlayerTeamPacket(team.getName(), 1, Optional.empty(), ImmutableList.of());
     }
 
-    public static ClientboundSetPlayerTeamPacket createPlayerPacket(PlayerTeam team, String playerName, ClientboundSetPlayerTeamPacket.Action operation) {
-        return new ClientboundSetPlayerTeamPacket(team.getName(), operation == ClientboundSetPlayerTeamPacket.Action.ADD ? 3 : 4, Optional.empty(), ImmutableList.of(playerName));
+    public static ClientboundSetPlayerTeamPacket createPlayerPacket(PlayerTeam team, String playerName, Action operation) {
+        return new ClientboundSetPlayerTeamPacket(team.getName(), operation == Action.ADD ? 3 : 4, Optional.empty(), ImmutableList.of(playerName));
     }
 
     // Paper start
-    public static ClientboundSetPlayerTeamPacket createMultiplePlayerPacket(PlayerTeam team, Collection<String> players, ClientboundSetPlayerTeamPacket.Action operation) {
-        return new ClientboundSetPlayerTeamPacket(team.getName(), operation == ClientboundSetPlayerTeamPacket.Action.ADD ? 3 : 4, Optional.empty(), players);
+    public static ClientboundSetPlayerTeamPacket createMultiplePlayerPacket(PlayerTeam team, Collection<String> players, Action operation) {
+        return new ClientboundSetPlayerTeamPacket(team.getName(), operation == Action.ADD ? 3 : 4, Optional.empty(), players);
     }
     // Paper end
 
@@ -52,7 +54,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         this.name = buf.readUtf();
         this.method = buf.readByte();
         if (shouldHaveParameters(this.method)) {
-            this.parameters = Optional.of(new ClientboundSetPlayerTeamPacket.Parameters(buf));
+            this.parameters = Optional.of(new Parameters(buf));
         } else {
             this.parameters = Optional.empty();
         }
@@ -90,27 +92,27 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
     }
 
     @Nullable
-    public ClientboundSetPlayerTeamPacket.Action getPlayerAction() {
+    public Action getPlayerAction() {
         switch (this.method) {
             case 0:
             case 3:
-                return ClientboundSetPlayerTeamPacket.Action.ADD;
+                return Action.ADD;
             case 1:
             case 2:
             default:
                 return null;
             case 4:
-                return ClientboundSetPlayerTeamPacket.Action.REMOVE;
+                return Action.REMOVE;
         }
     }
 
     @Nullable
-    public ClientboundSetPlayerTeamPacket.Action getTeamAction() {
+    public Action getTeamAction() {
         switch (this.method) {
             case 0:
-                return ClientboundSetPlayerTeamPacket.Action.ADD;
+                return Action.ADD;
             case 1:
-                return ClientboundSetPlayerTeamPacket.Action.REMOVE;
+                return Action.REMOVE;
             default:
                 return null;
         }
@@ -129,7 +131,7 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
         return this.players;
     }
 
-    public Optional<ClientboundSetPlayerTeamPacket.Parameters> getParameters() {
+    public Optional<Parameters> getParameters() {
         return this.parameters;
     }
 
@@ -157,6 +159,26 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
             this.playerSuffix = team.getPlayerSuffix();
         }
 
+        public Parameters(String displayName, String prefix, String suffix, String nametagVisibility, String collisionRule, ChatFormatting color, int options) {
+            this.displayName = CraftChatMessage.fromString(displayName)[0];
+            this.playerPrefix = CraftChatMessage.fromString(prefix)[0];
+            this.playerSuffix = CraftChatMessage.fromString(suffix)[0];
+            this.nametagVisibility = nametagVisibility;
+            this.collisionRule = collisionRule;
+            this.color = color;
+            this.options = options;
+        }
+
+        public Parameters(Component displayName, Component prefix, Component suffix, String nametagVisibility, String collisionRule, ChatFormatting color, int options) {
+            this.displayName = displayName;
+            this.playerPrefix = prefix;
+            this.playerSuffix = suffix;
+            this.nametagVisibility = nametagVisibility;
+            this.collisionRule = collisionRule;
+            this.color = color;
+            this.options = options;
+        }
+
         public Parameters(FriendlyByteBuf buf) {
             this.displayName = buf.readComponent();
             this.options = buf.readByte();
@@ -205,4 +227,4 @@ public class ClientboundSetPlayerTeamPacket implements Packet<ClientGamePacketLi
             buf.writeComponent(this.playerSuffix);
         }
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
index d5f404fb6dc09c48d84b4a3e75c12f2fbb53c224..b1dbdc7984817134b196858b30ede45a7a85074a 100644
--- a/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
+++ b/src/main/java/net/minecraft/network/protocol/game/ClientboundTeleportEntityPacket.java
@@ -4,6 +4,7 @@ import net.minecraft.network.FriendlyByteBuf;
 import net.minecraft.network.protocol.Packet;
 import net.minecraft.world.entity.Entity;
 import net.minecraft.world.phys.Vec3;
+import org.bukkit.Location;
 
 public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketListener> {
     private final int id;
@@ -22,7 +23,7 @@ public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketL
         this.z = vec3.z;
         this.yRot = (byte)((int)(entity.getYRot() * 256.0F / 360.0F));
         this.xRot = (byte)((int)(entity.getXRot() * 256.0F / 360.0F));
-        this.onGround = entity.onGround();
+        this.onGround = entity.isOnGround();
     }
 
     public ClientboundTeleportEntityPacket(FriendlyByteBuf buf) {
@@ -35,6 +36,20 @@ public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketL
         this.onGround = buf.readBoolean();
     }
 
+    public ClientboundTeleportEntityPacket(int entityId, Vec3 vec3, byte yRot, byte xRot, boolean onGround) {
+        this.id = entityId;
+        this.x = vec3.x;
+        this.y = vec3.y;
+        this.z = vec3.z;
+        this.yRot = yRot;
+        this.xRot = xRot;
+        this.onGround = onGround;
+    }
+
+    public ClientboundTeleportEntityPacket(int entityId, Location location) {
+        this(entityId, Vec3.ZERO, (byte) (location.getYaw() * 256.0F / 360.0F), (byte) (location.getYaw() * 256.0F / 360.0F), false);
+    }
+
     @Override
     public void write(FriendlyByteBuf buf) {
         buf.writeVarInt(this.id);
@@ -78,4 +93,4 @@ public class ClientboundTeleportEntityPacket implements Packet<ClientGamePacketL
     public boolean isOnGround() {
         return this.onGround;
     }
-}
+}
\ No newline at end of file
diff --git a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
index 95bc2947ac44fa46f11c528da7f241ba410b7eb6..ce29f4f88d15d7fe33cf121edba03614cfbdd0f5 100644
--- a/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
+++ b/src/main/java/org/bukkit/craftbukkit/entity/CraftPlayer.java
@@ -207,6 +207,12 @@ public class CraftPlayer extends CraftHumanEntity implements Player {
         return io.papermc.paper.chunk.system.RegionizedPlayerChunkLoader.getAPIViewDistance(this);
     }
 
+    @Override
+    public void sendPacket(@NotNull Object obj) {
+        if (obj instanceof Packet<?> packet)
+            getHandle().connection.send(packet);
+    }
+
     @Override
     public void setViewDistance(int viewDistance) {
         this.getHandle().setLoadViewDistance(viewDistance < 0 ? viewDistance : viewDistance + 1);
