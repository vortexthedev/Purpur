From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xVorttex <sigamatute@gmail.com>
Date: Fri, 27 Sep 2024 22:19:09 +0300
Subject: [PATCH] Optimizations & cleanup & getHand() event


diff --git a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java b/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
deleted file mode 100644
index 4825c9ca2191d3bf1440b986827fc32e230a3280..0000000000000000000000000000000000000000
--- a/src/main/java/com/destroystokyo/paper/util/VersionFetcher.java
+++ /dev/null
@@ -1,51 +0,0 @@
-package com.destroystokyo.paper.util;
-
-import net.kyori.adventure.text.Component;
-import net.kyori.adventure.text.format.NamedTextColor;
-import org.bukkit.Bukkit;
-import org.jetbrains.annotations.NotNull;
-
-/**
- * Version fetcher
- */
-public interface VersionFetcher {
-    /**
-     * Amount of time to cache results for in milliseconds
-     * <p>
-     * Negative values will never cache.
-     *
-     * @return cache time
-     */
-    long getCacheTime();
-
-    /**
-     * Gets the version message to cache and show to command senders.
-     *
-     * <p>NOTE: This is run in a new thread separate from that of the command processing thread</p>
-     *
-     * @param serverVersion the current version of the server (will match {@link Bukkit#getVersion()})
-     * @return the message to show when requesting a version
-     */
-    @NotNull
-    Component getVersionMessage(@NotNull String serverVersion);
-
-    /**
-     * Dummy version fetcher
-     */
-    class DummyVersionFetcher implements VersionFetcher {
-
-        @Override
-        public long getCacheTime() {
-            return -1;
-        }
-
-        @NotNull
-        @Override
-        public Component getVersionMessage(@NotNull String serverVersion) {
-            Bukkit.getLogger().warning("Version provider has not been set, cannot check for updates!");
-            Bukkit.getLogger().info("Override the default implementation of org.bukkit.UnsafeValues#getVersionFetcher()");
-            new Throwable().printStackTrace();
-            return Component.text("Unable to check for updates. No version provider set.", NamedTextColor.RED);
-        }
-    }
-}
diff --git a/src/main/java/org/bukkit/UnsafeValues.java b/src/main/java/org/bukkit/UnsafeValues.java
index b2502aaab690b1414a1adffdf64e5a5456feb99c..9b6e50a1f72d1fd56c5520cdeec97e63837ea339 100644
--- a/src/main/java/org/bukkit/UnsafeValues.java
+++ b/src/main/java/org/bukkit/UnsafeValues.java
@@ -85,15 +85,6 @@ public interface UnsafeValues {
      */
     String getTimingsServerName();
 
-    /**
-     * Called once by the version command on first use, then cached.
-     *
-     * @return Paper's VersionFetcher
-     */
-    default com.destroystokyo.paper.util.VersionFetcher getVersionFetcher() {
-        return new com.destroystokyo.paper.util.VersionFetcher.DummyVersionFetcher();
-    }
-
     boolean isSupportedApiVersion(String apiVersion);
 
     static boolean isLegacyPlugin(org.bukkit.plugin.Plugin plugin) {
diff --git a/src/main/java/org/bukkit/command/defaults/VersionCommand.java b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
index 4c2ddc722a9dc4011906ad9530b13fa9be1d3ff9..f13ea727a7e1c2c2cc37ffc36d09e55c11251d3b 100644
--- a/src/main/java/org/bukkit/command/defaults/VersionCommand.java
+++ b/src/main/java/org/bukkit/command/defaults/VersionCommand.java
@@ -1,23 +1,7 @@
 package org.bukkit.command.defaults;
 
-import com.destroystokyo.paper.util.VersionFetcher; // Paper - version supplier
-import com.google.common.base.Charsets;
 import com.google.common.collect.ImmutableList;
-import com.google.common.io.Resources;
-import com.google.gson.Gson;
-import com.google.gson.JsonObject;
-import com.google.gson.JsonSyntaxException;
-import java.io.BufferedReader;
-import java.io.IOException;
-import java.net.URL;
-import java.net.URLEncoder;
-import java.util.ArrayList;
-import java.util.Arrays;
-import java.util.HashSet;
-import java.util.List;
-import java.util.Set;
-import java.util.concurrent.locks.ReentrantLock;
-import net.kyori.adventure.text.Component; // Paper
+import net.kyori.adventure.text.Component;
 import org.apache.commons.lang.Validate;
 import org.bukkit.Bukkit;
 import org.bukkit.ChatColor;
@@ -27,15 +11,11 @@ import org.bukkit.plugin.PluginDescriptionFile;
 import org.bukkit.util.StringUtil;
 import org.jetbrains.annotations.NotNull;
 
-public class VersionCommand extends BukkitCommand {
-    private VersionFetcher versionFetcher;
-    private VersionFetcher getVersionFetcher() { // lazy load because unsafe isn't available at command registration
-        if (versionFetcher == null) {
-            versionFetcher = Bukkit.getUnsafe().getVersionFetcher();
-        }
+import java.util.ArrayList;
+import java.util.Arrays;
+import java.util.List;
 
-        return versionFetcher;
-    }
+public class VersionCommand extends BukkitCommand {
 
     public VersionCommand(@NotNull String name) {
         super(name);
@@ -155,133 +135,11 @@ public class VersionCommand extends BukkitCommand {
         return ImmutableList.of();
     }
 
-    private final ReentrantLock versionLock = new ReentrantLock();
-    private boolean hasVersion = false;
-    private Component versionMessage = null; // Paper
-    private final Set<CommandSender> versionWaiters = new HashSet<CommandSender>();
-    private boolean versionTaskStarted = false;
-    private long lastCheck = 0;
-
     private void sendVersion(@NotNull CommandSender sender) {
-        if (hasVersion) {
-            if (System.currentTimeMillis() - lastCheck > getVersionFetcher().getCacheTime()) { // Paper - use version supplier
-                lastCheck = System.currentTimeMillis();
-                hasVersion = false;
-            } else {
-                sender.sendMessage(versionMessage);
-                return;
-            }
-        }
-        versionLock.lock();
-        try {
-            if (hasVersion) {
-                sender.sendMessage(versionMessage);
-                return;
-            }
-            versionWaiters.add(sender);
-            sender.sendMessage(Component.text("Checking version, please wait...", net.kyori.adventure.text.format.NamedTextColor.WHITE, net.kyori.adventure.text.format.TextDecoration.ITALIC)); // Paper
-            if (!versionTaskStarted) {
-                versionTaskStarted = true;
-                new Thread(new Runnable() {
-
-                    @Override
-                    public void run() {
-                        obtainVersion();
-                    }
-                }).start();
-            }
-        } finally {
-            versionLock.unlock();
-        }
-    }
-
-    private void obtainVersion() {
-        String version = Bukkit.getVersion();
-        // Paper start
-        if (version.startsWith("null")) { // running from ide?
-            setVersionMessage(Component.text("Unknown version, custom build?", net.kyori.adventure.text.format.NamedTextColor.YELLOW));
-            return;
-        }
-        setVersionMessage(getVersionFetcher().getVersionMessage(version));
-        /*
-        if (version == null) version = "Custom";
-        String[] parts = version.substring(0, version.indexOf(' ')).split("-");
-        if (parts.length == 4) {
-            int cbVersions = getDistance("craftbukkit", parts[3]);
-            int spigotVersions = getDistance("spigot", parts[2]);
-            if (cbVersions == -1 || spigotVersions == -1) {
-                setVersionMessage("Error obtaining version information");
-            } else {
-                if (cbVersions == 0 && spigotVersions == 0) {
-                    setVersionMessage("You are running the latest version");
-                } else {
-                    setVersionMessage("You are " + (cbVersions + spigotVersions) + " version(s) behind");
-                }
-            }
-
-        } else if (parts.length == 3) {
-            int cbVersions = getDistance("craftbukkit", parts[2]);
-            if (cbVersions == -1) {
-                setVersionMessage("Error obtaining version information");
-            } else {
-                if (cbVersions == 0) {
-                    setVersionMessage("You are running the latest version");
-                } else {
-                    setVersionMessage("You are " + cbVersions + " version(s) behind");
-                }
-            }
-        } else {
-            setVersionMessage("Unknown version, custom build?");
-        }
-         */
-        // Paper end
+        sender.sendMessage(Component.text("This server is running " + Bukkit.getName() +
+                " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")",
+                net.kyori.adventure.text.format.NamedTextColor.WHITE));
     }
 
-    // Paper start
-    private void setVersionMessage(final @NotNull Component msg) {
-        lastCheck = System.currentTimeMillis();
-        final Component message = net.kyori.adventure.text.TextComponent.ofChildren(
-            Component.text("This server is running " + Bukkit.getName() + " version " + Bukkit.getVersion() + " (Implementing API version " + Bukkit.getBukkitVersion() + ")", net.kyori.adventure.text.format.NamedTextColor.WHITE),
-            Component.newline(),
-            msg
-        );
-        this.versionMessage = Component.text()
-            .append(message)
-            .hoverEvent(Component.text("Click to copy to clipboard", net.kyori.adventure.text.format.NamedTextColor.WHITE))
-            .clickEvent(net.kyori.adventure.text.event.ClickEvent.copyToClipboard(net.kyori.adventure.text.serializer.plain.PlainComponentSerializer.plain().serialize(message)))
-            .build();
-        // Paper end
-        versionLock.lock();
-        try {
-            hasVersion = true;
-            versionTaskStarted = false;
-            for (CommandSender sender : versionWaiters) {
-                sender.sendMessage(versionMessage);
-            }
-            versionWaiters.clear();
-        } finally {
-            versionLock.unlock();
-        }
-    }
 
-    private static int getDistance(@NotNull String repo, @NotNull String hash) {
-        try {
-            BufferedReader reader = Resources.asCharSource(
-                    new URL("https://hub.spigotmc.org/stash/rest/api/1.0/projects/SPIGOT/repos/" + repo + "/commits?since=" + URLEncoder.encode(hash, "UTF-8") + "&withCounts=true"),
-                    Charsets.UTF_8
-            ).openBufferedStream();
-            try {
-                JsonObject obj = new Gson().fromJson(reader, JsonObject.class);
-                return obj.get("totalCount").getAsInt();
-            } catch (JsonSyntaxException ex) {
-                ex.printStackTrace();
-                return -1;
-            } finally {
-                reader.close();
-            }
-        } catch (IOException e) {
-            e.printStackTrace();
-            return -1;
-        }
-    }
 }
diff --git a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
index 373f4b5b5185aa81ff728da89c9cc4e0ccf87889..ceeeb570cfa9ed36cbb0a0ba9ce281dcdfe601ea 100644
--- a/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
+++ b/src/main/java/org/bukkit/event/player/PlayerItemConsumeEvent.java
@@ -4,6 +4,7 @@ import org.bukkit.Material;
 import org.bukkit.entity.Player;
 import org.bukkit.event.Cancellable;
 import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.EquipmentSlot;
 import org.bukkit.inventory.ItemStack;
 import org.jetbrains.annotations.NotNull;
 import org.jetbrains.annotations.Nullable;
@@ -22,16 +23,17 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
     private static final HandlerList handlers = new HandlerList();
     private boolean isCancelled = false;
     private ItemStack item;
+    private final EquipmentSlot hand;
     @Nullable private ItemStack replacement; // Paper
 
     /**
      * @param player the player consuming
      * @param item the ItemStack being consumed
      */
-    public PlayerItemConsumeEvent(@NotNull final Player player, @NotNull final ItemStack item) {
+    public PlayerItemConsumeEvent(@NotNull final Player player, @NotNull final ItemStack item, @NotNull final EquipmentSlot hand) {
         super(player);
-
         this.item = item;
+        this.hand = hand;
     }
 
     /**
@@ -71,6 +73,16 @@ public class PlayerItemConsumeEvent extends PlayerEvent implements Cancellable {
         return this.replacement;
     }
 
+    /**
+     * Get the hand used to consume the item.
+     *
+     * @return the hand
+     */
+    @NotNull
+    public EquipmentSlot getHand() {
+        return hand;
+    }
+
     /**
      * Set a custom item stack to replace the consumed item. Pass null to clear any custom
      * stack that has been set and use the default replacement.
