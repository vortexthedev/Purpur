From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: xVorttex <sigamatute@gmail.com>
Date: Fri, 27 Sep 2024 02:19:53 +0300
Subject: [PATCH] Brewind & Furnace events


diff --git a/src/main/java/org/bukkit/event/block/BrewingStartEvent.java b/src/main/java/org/bukkit/event/block/BrewingStartEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..43eac972f45d1cbb6278b048f8e6d7882c0aabeb
--- /dev/null
+++ b/src/main/java/org/bukkit/event/block/BrewingStartEvent.java
@@ -0,0 +1,41 @@
+package org.bukkit.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.HandlerList;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when a brewing stand starts to brew.
+ */
+@org.jetbrains.annotations.ApiStatus.Experimental // Paper
+public class BrewingStartEvent extends InventoryBlockStartEvent {
+
+    // Paper - remove HandlerList
+    private int brewingTime;
+
+    public BrewingStartEvent(@NotNull final Block furnace, @NotNull ItemStack source, int brewingTime) {
+        super(furnace, source);
+        this.brewingTime = brewingTime;
+    }
+
+    /**
+     * Gets the total brew time associated with this event.
+     *
+     * @return the total brew time
+     */
+    public int getTotalBrewTime() {
+        return brewingTime;
+    }
+
+    /**
+     * Sets the total brew time for this event.
+     *
+     * @param brewTime the new total brew time
+     */
+    public void setTotalBrewTime(int brewTime) {
+        this.brewingTime = brewTime;
+    }
+
+    // Paper - remove HandlerList
+}
diff --git a/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java b/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..ae4a88140e28049c22fb4ea74be19355665e8474
--- /dev/null
+++ b/src/main/java/org/bukkit/event/block/InventoryBlockStartEvent.java
@@ -0,0 +1,50 @@
+package org.bukkit.event.block;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.inventory.FurnaceStartSmeltEvent;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.ApiStatus;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Used when:
+ * <ul>
+ * <li>A Furnace starts smelting {@link FurnaceStartSmeltEvent}</li>
+ * <li>A Brewing-Stand starts brewing {@link BrewingStartEvent}</li>
+ * </ul>
+ *
+ * draft API
+ */
+@ApiStatus.Experimental
+public class InventoryBlockStartEvent extends BlockEvent {
+
+    private static final HandlerList handlers = new HandlerList();
+    protected ItemStack source; // Paper
+
+    public InventoryBlockStartEvent(@NotNull final Block block, @NotNull ItemStack source) {
+        super(block);
+        this.source = source;
+    }
+
+    /**
+     * Gets the source ItemStack for this event.
+     *
+     * @return the source ItemStack
+     */
+    @NotNull
+    public ItemStack getSource() {
+        return source;
+    }
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
diff --git a/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
new file mode 100644
index 0000000000000000000000000000000000000000..5f476304598159e9045b116dbbfa191330080210
--- /dev/null
+++ b/src/main/java/org/bukkit/event/inventory/FurnaceStartSmeltEvent.java
@@ -0,0 +1,89 @@
+package org.bukkit.event.inventory;
+
+import org.bukkit.block.Block;
+import org.bukkit.event.HandlerList;
+import org.bukkit.event.block.BlockEvent;
+import org.bukkit.event.block.InventoryBlockStartEvent;
+import org.bukkit.inventory.CookingRecipe;
+import org.bukkit.inventory.ItemStack;
+import org.jetbrains.annotations.NotNull;
+
+/**
+ * Called when any of the furnace-like blocks start smelting.
+ * <p>
+ * Furnace-like blocks are {@link org.bukkit.block.Furnace},
+ * {@link org.bukkit.block.Smoker}, and {@link org.bukkit.block.BlastFurnace}.
+ */
+public class FurnaceStartSmeltEvent extends BlockEvent {
+    private static final HandlerList handlers = new HandlerList();
+    
+    // Paper - remove HandlerList
+    private ItemStack source; // Paper
+    private final CookingRecipe<?> recipe;
+    private int totalCookTime;
+
+    @Deprecated // Paper - furnace cook speed multiplier
+    public FurnaceStartSmeltEvent(@NotNull final Block furnace, @NotNull ItemStack source, @NotNull final CookingRecipe<?> recipe) {
+        // Paper start
+        this(furnace, source, recipe, recipe.getCookingTime());
+    }
+
+    public FurnaceStartSmeltEvent(final @NotNull Block furnace, final @NotNull ItemStack source, final @NotNull CookingRecipe<?> recipe, final int cookingTime) {
+        // Paper end
+        super(furnace);
+        this.source = source;
+        this.recipe = recipe;
+        this.totalCookTime = cookingTime; // Paper - furnace cook speed multiplier
+    }
+
+    /**
+     * Gets the source ItemStack for this event.
+     *
+     * @return the source ItemStack
+     */
+    @NotNull
+    public ItemStack getSource() {
+        return source;
+    }
+
+    /**
+     * Gets the FurnaceRecipe associated with this event
+     *
+     * @return the FurnaceRecipe being cooked
+     */
+    @NotNull
+    public CookingRecipe<?> getRecipe() {
+        return recipe;
+    }
+
+    /**
+     * Gets the total cook time associated with this event
+     *
+     * @return the total cook time
+     */
+    public int getTotalCookTime() {
+        return totalCookTime;
+    }
+
+    /**
+     * Sets the total cook time for this event
+     *
+     * @param cookTime the new total cook time
+     */
+    public void setTotalCookTime(int cookTime) {
+        this.totalCookTime = cookTime;
+    }
+
+    // Paper - remove HandlerList
+
+    @NotNull
+    @Override
+    public HandlerList getHandlers() {
+        return handlers;
+    }
+
+    @NotNull
+    public static HandlerList getHandlerList() {
+        return handlers;
+    }
+}
